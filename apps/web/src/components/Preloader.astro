---
// Preloader component for Astro site
// Based on the /website implementation but adapted for Astro architecture
---

<div id="preloader" class="preloader">
  <div class="preloader__background"></div>
  <div class="preloader__content">
    <video 
      id="preloader-video" 
      class="preloader__video"
      preload="auto"
      muted
      playsinline
      autoplay
      disablePictureInPicture
      webkit-playsinline>
      <source src="/videos/preloader.mp4" type="video/mp4">
      <source src="/videos/preloader.mp4" type="video/quicktime">
      Your browser does not support the video tag.
    </video>
  </div>
</div>

<style>
  /* Fullscreen Preloader Styles */
  .preloader {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 9999;
    display: flex;
    align-items: center;
    justify-content: center;
    opacity: 1;
    visibility: visible;
    transition: opacity 0.8s ease-out, visibility 0.8s ease-out;
  }

  .preloader.fade-out {
    opacity: 0;
    visibility: hidden;
  }

  .preloader__background {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: #000000;
    z-index: 1;
  }

  .preloader__content {
    position: relative;
    z-index: 2;
    display: flex;
    align-items: center;
    justify-content: center;
    width: 100%;
    height: 100%;
    padding: 20px;
    box-sizing: border-box;
    /* Lower the preloader from center by adding top padding */
    padding-top: 25vh;
  }

  .preloader__video {
    max-width: 90%;
    max-height: 90%;
    width: auto;
    height: auto;
    object-fit: contain;
    display: block;
  }

  /* Disable scrolling when preloader is active */
  body.preloader-active {
    overflow: hidden;
    height: 100vh;
  }

  /* Mobile responsive adjustments */
  @media (max-width: 768px) {
    .preloader__video {
      max-width: 95%;
      max-height: 95%;
    }
    
    .preloader__content {
      padding: 10px;
      /* Ensure consistent 25vh positioning on mobile */
      padding-top: 25vh;
    }
  }

  @media (max-width: 480px) {
    .preloader__video {
      max-width: 98%;
      max-height: 98%;
    }
    
    .preloader__content {
      /* Ensure consistent 25vh positioning on small mobile */
      padding-top: 25vh;
    }
  }

  /* Accessibility: Respect reduced motion preference for preloader */
  @media (prefers-reduced-motion: reduce) {
    .preloader {
      transition: none;
    }
  }
</style>

<script>
  // Preloader JavaScript for Astro
  document.addEventListener('DOMContentLoaded', function() {
    console.log('Preloader: DOM loaded');
    
    const preloader = document.getElementById('preloader');
    const video = document.getElementById('preloader-video');
    const body = document.body;
    
    if (!preloader) {
      console.error('Preloader: Preloader element not found');
      return;
    }
    
    // Function to determine if this is a genuine page load (not internal navigation)
    function shouldShowPreloader() {
      // Check if we have a referrer from the same domain
      const referrer = document.referrer;
      const currentHost = window.location.host;
      
      console.log('Preloader: Referrer:', referrer);
      console.log('Preloader: Current host:', currentHost);
      
      // If referrer exists and contains our current host, it's likely internal navigation
      if (referrer && referrer.includes(currentHost)) {
        // Additional check: if the referrer is exactly another page on our site
        const referrerPath = referrer.replace(window.location.origin, '');
        console.log('Preloader: Referrer path:', referrerPath);
        
        // If coming from another page on our site (not the same page), hide preloader
        if (referrerPath && referrerPath !== window.location.pathname) {
          console.log('Preloader: Internal navigation from different page - hiding preloader');
          return false;
        }
      }
      
      // Check performance API for reload detection
      if (typeof performance !== 'undefined' && performance.navigation) {
        const navType = performance.navigation.type;
        console.log('Preloader: Navigation type:', navType);
        
        // 1 = reload - always show preloader for manual refresh
        if (navType === 1) {
          console.log('Preloader: Manual refresh detected - showing preloader');
          return true;
        }
      }
      
      // Modern Navigation API
      if (performance && performance.getEntriesByType) {
        const navEntries = performance.getEntriesByType('navigation');
        if (navEntries.length > 0) {
          const navEntry = navEntries[0];
          console.log('Preloader: Navigation entry type:', navEntry.type);
          
          // Always show for reload
          if (navEntry.type === 'reload') {
            console.log('Preloader: Reload detected - showing preloader');
            return true;
          }
        }
      }
      
      // If no referrer at all, it's likely a direct load or first visit
      if (!referrer) {
        console.log('Preloader: No referrer - showing preloader (direct load/first visit)');
        return true;
      }
      
      // Default to showing preloader for safety (better to show when not needed than miss genuine loads)
      console.log('Preloader: Defaulting to show preloader');
      return true;
    }
    
    // Check if we should show the preloader
    if (!shouldShowPreloader()) {
      console.log('Preloader: Should not show preloader - removing immediately');
      if (preloader && preloader.parentNode) {
        preloader.parentNode.removeChild(preloader);
      }
      body.classList.remove('preloader-active');
      return;
    }
    
    console.log('Preloader: Should show preloader - initializing');
    console.log('Preloader: Elements found', { preloader: !!preloader, video: !!video });
    
    // Enable scrolling lock
    body.classList.add('preloader-active');
    console.log('Preloader: Added preloader-active class');
    
    // Function to hide preloader
    function hidePreloader() {
      console.log('Preloader: Hiding preloader');
      preloader.classList.add('fade-out');
      
      setTimeout(() => {
        if (preloader.parentNode) {
          preloader.parentNode.removeChild(preloader);
        }
        body.classList.remove('preloader-active');
        console.log('Preloader: Successfully removed');
      }, 800);
    }
    
    // Handle video
    if (video) {
      console.log('Preloader: Video element found, src:', video.src || 'no src');
      
      // Explicitly play the video for reliable autoplay
      const playPromise = video.play();
      
      if (playPromise !== undefined) {
        playPromise.then(() => {
          console.log('Preloader: Video autoplay successful');
        }).catch(error => {
          console.error('Preloader: Video autoplay failed:', error);
        });
      }
      
      video.addEventListener('error', function(e) {
        console.error('Preloader: Video error:', e, video.error);
        hidePreloader();
      });
      
      video.addEventListener('loadeddata', function() {
        console.log('Preloader: Video loaded successfully');
      });
    }
    
    // Hide preloader when page is fully loaded
    if (document.readyState === 'complete') {
      console.log('Preloader: Page already complete');
      setTimeout(hidePreloader, 3000);
    } else {
      window.addEventListener('load', function() {
        console.log('Preloader: Window load event');
        setTimeout(hidePreloader, 3000);
      });
    }
    
    // Fallback timeout
    setTimeout(function() {
      console.log('Preloader: Fallback timeout triggered');
      hidePreloader();
    }, 8000);
  });
</script>

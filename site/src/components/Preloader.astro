---
// Preloader component for Astro site
// Based on the /website implementation but adapted for Astro architecture
---

<div id="preloader" class="preloader">
  <div class="preloader__background"></div>
  <div class="preloader__content">
    <video 
      id="preloader-video" 
      class="preloader__video"
      preload="auto"
      muted
      playsinline
      autoplay
      disablePictureInPicture
      webkit-playsinline
      poster="/images/Home/Home-About-now.jpg">
      <source src="/videos/preloader.mp4" type="video/mp4">
      <source src="/videos/preloader.mp4" type="video/quicktime">
      Your browser does not support the video tag.
    </video>
  </div>
</div>

<style>
  /* Fullscreen Preloader Styles */
  .preloader {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 9999;
    display: flex;
    align-items: center;
    justify-content: center;
    opacity: 1;
    visibility: visible;
    transition: opacity 0.8s ease-out, visibility 0.8s ease-out;
  }

  .preloader.fade-out {
    opacity: 0;
    visibility: hidden;
  }

  .preloader__background {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: #000000;
    z-index: 1;
  }

  .preloader__content {
    position: relative;
    z-index: 2;
    display: flex;
    align-items: center;
    justify-content: center;
    width: 100%;
    height: 100%;
    padding: 20px;
    box-sizing: border-box;
    /* Lower the preloader from center by adding top padding */
    padding-top: 25vh;
  }

  .preloader__video {
    max-width: 90%;
    max-height: 90%;
    width: auto;
    height: auto;
    object-fit: contain;
    display: block;
    opacity: 0;
    transition: opacity 0.5s ease-in;
  }

  /* Fade in video when ready to play */
  .preloader__video.is-ready {
    opacity: 1;
  }

  /* Disable scrolling when preloader is active */
  body.preloader-active {
    overflow: hidden;
    height: 100vh;
  }

  /* Mobile responsive adjustments */
  @media (max-width: 768px) {
    .preloader__video {
      max-width: 95%;
      max-height: 95%;
    }
    
    .preloader__content {
      padding: 10px;
      /* Ensure consistent 25vh positioning on mobile */
      padding-top: 25vh;
    }
  }

  @media (max-width: 480px) {
    .preloader__video {
      max-width: 98%;
      max-height: 98%;
    }
    
    .preloader__content {
      /* Ensure consistent 25vh positioning on small mobile */
      padding-top: 25vh;
    }
  }

  /* Accessibility: Respect reduced motion preference for preloader */
  @media (prefers-reduced-motion: reduce) {
    .preloader {
      transition: none;
    }
  }
</style>

<script>
  // Mobile phone detection (not tablets)
  function isMobilePhone() {
    const ua = navigator.userAgent;
    const isMobile = /Android|webOS|iPhone|iPod|BlackBerry|IEMobile|Opera Mini/i.test(ua);
    const isTablet = /iPad|Android(?!.*Mobile)/i.test(ua);
    const hasTouch = 'ontouchstart' in window || navigator.maxTouchPoints > 0;
    const isSmallScreen = window.innerWidth <= 768;
    
    // Mobile phone: has touch, small screen, and is not a tablet
    return isMobile && !isTablet && hasTouch && isSmallScreen;
  }

  // Enhanced iPhone Safari-safe autoplay utility with mobile phone detection
  function initHeroVideo(selector) {
    const v = document.querySelector(selector);
    if (!v) return;
    
    const isMobile = isMobilePhone();
    console.log('Preloader: Is mobile phone:', isMobile);
    
    // Force set all required properties programmatically
    v.muted = true;
    v.defaultMuted = true;
    v.playsInline = true;
    v.autoplay = true;
    v.preload = 'auto';
    v.volume = 0;
    
    // Ensure attributes are also set
    v.setAttribute('muted', '');
    v.setAttribute('playsinline', '');
    v.setAttribute('webkit-playsinline', '');
    v.setAttribute('autoplay', '');
    v.setAttribute('preload', 'auto');
    
    let tried = false;
    const tryPlay = async () => {
      if (tried) return;
      tried = true;
      
      console.log('Preloader: Attempting to play video');
      
      try {
        // For mobile, ensure properties are set again right before play
        if (isMobile) {
          v.muted = true;
          v.playsInline = true;
          v.volume = 0;
        }
        
        await v.play();
        v.classList.add('is-ready');
        console.log('Preloader: Video autoplay successful');
      } catch (error) {
        console.warn('Preloader: Video autoplay blocked:', error);
        
        // Set up user interaction handlers with more event types for mobile
        const once = () => {
          v.play()
            .then(() => {
              v.classList.add('is-ready');
              console.log('Preloader: Video started after user interaction');
            })
            .catch((err) => {
              console.warn('Preloader: Play failed after interaction:', err);
            });
        };
        
        // Listen for multiple interaction types for better mobile compatibility
        ['touchstart', 'touchend', 'click'].forEach(eventType => {
          window.addEventListener(eventType, once, { once: true, passive: true });
        });
      }
    };
    
    // Multiple trigger points for maximum compatibility
    v.addEventListener('canplay', tryPlay, { once: true });
    v.addEventListener('loadedmetadata', () => {
      setTimeout(tryPlay, isMobile ? 300 : 150);
    }, { once: true });
    v.addEventListener('loadeddata', () => {
      setTimeout(tryPlay, 100);
    }, { once: true });
    
    // Visibility change handler
    document.addEventListener('visibilitychange', () => {
      if (document.visibilityState === 'visible' && !tried) {
        tryPlay();
      }
    });
    
    // Final fallback with longer delay for mobile
    setTimeout(() => {
      if (!tried || v.paused) {
        tryPlay();
      }
    }, isMobile ? 1000 : 800);
    
    // Force load start
    v.load();
  }
  
  // Preloader JavaScript for Astro
  document.addEventListener('DOMContentLoaded', function() {
    console.log('Preloader: DOM loaded');
    
    const preloader = document.getElementById('preloader');
    const video = document.getElementById('preloader-video');
    const body = document.body;
    
    if (!preloader) {
      console.error('Preloader: Preloader element not found');
      return;
    }
    
    // Function to determine if this is a genuine page load (not internal navigation)
    function shouldShowPreloader() {
      // Check if we have a referrer from the same domain
      const referrer = document.referrer;
      const currentHost = window.location.host;
      
      console.log('Preloader: Referrer:', referrer);
      console.log('Preloader: Current host:', currentHost);
      
      // If referrer exists and contains our current host, it's likely internal navigation
      if (referrer && referrer.includes(currentHost)) {
        // Additional check: if the referrer is exactly another page on our site
        const referrerPath = referrer.replace(window.location.origin, '');
        console.log('Preloader: Referrer path:', referrerPath);
        
        // If coming from another page on our site (not the same page), hide preloader
        if (referrerPath && referrerPath !== window.location.pathname) {
          console.log('Preloader: Internal navigation from different page - hiding preloader');
          return false;
        }
      }
      
      // Check performance API for reload detection
      if (typeof performance !== 'undefined' && performance.navigation) {
        const navType = performance.navigation.type;
        console.log('Preloader: Navigation type:', navType);
        
        // 1 = reload - always show preloader for manual refresh
        if (navType === 1) {
          console.log('Preloader: Manual refresh detected - showing preloader');
          return true;
        }
      }
      
      // Modern Navigation API
      if (performance && performance.getEntriesByType) {
        const navEntries = performance.getEntriesByType('navigation');
        if (navEntries.length > 0) {
          const navEntry = navEntries[0];
          console.log('Preloader: Navigation entry type:', navEntry.type);
          
          // Always show for reload
          if (navEntry.type === 'reload') {
            console.log('Preloader: Reload detected - showing preloader');
            return true;
          }
        }
      }
      
      // If no referrer at all, it's likely a direct load or first visit
      if (!referrer) {
        console.log('Preloader: No referrer - showing preloader (direct load/first visit)');
        return true;
      }
      
      // Default to showing preloader for safety (better to show when not needed than miss genuine loads)
      console.log('Preloader: Defaulting to show preloader');
      return true;
    }
    
    // Check if we should show the preloader
    if (!shouldShowPreloader()) {
      console.log('Preloader: Should not show preloader - removing immediately');
      if (preloader && preloader.parentNode) {
        preloader.parentNode.removeChild(preloader);
      }
      body.classList.remove('preloader-active');
      return;
    }
    
    console.log('Preloader: Should show preloader - initializing');
    console.log('Preloader: Elements found', { preloader: !!preloader, video: !!video });
    
    // Enable scrolling lock
    body.classList.add('preloader-active');
    console.log('Preloader: Added preloader-active class');
    
    // Function to hide preloader
    function hidePreloader() {
      console.log('Preloader: Hiding preloader');
      preloader.classList.add('fade-out');
      
      setTimeout(() => {
        if (preloader.parentNode) {
          preloader.parentNode.removeChild(preloader);
        }
        body.classList.remove('preloader-active');
        console.log('Preloader: Successfully removed');
      }, 800);
    }
    
    // Handle video with iPhone Safari-safe autoplay
    if (video) {
      console.log('Preloader: Video element found, src:', video.src || 'no src');
      
      // Initialize iPhone Safari-safe autoplay
      initHeroVideo('#preloader-video');
      
      video.addEventListener('error', function(e) {
        console.error('Preloader: Video error:', e, video.error);
        hidePreloader();
      });
      
      video.addEventListener('loadeddata', function() {
        console.log('Preloader: Video loaded successfully');
      });
    }
    
    // Hide preloader when page is fully loaded
    if (document.readyState === 'complete') {
      console.log('Preloader: Page already complete');
      setTimeout(hidePreloader, 3000);
    } else {
      window.addEventListener('load', function() {
        console.log('Preloader: Window load event');
        setTimeout(hidePreloader, 3000);
      });
    }
    
    // Fallback timeout
    setTimeout(function() {
      console.log('Preloader: Fallback timeout triggered');
      hidePreloader();
    }, 8000);
  });
</script>
